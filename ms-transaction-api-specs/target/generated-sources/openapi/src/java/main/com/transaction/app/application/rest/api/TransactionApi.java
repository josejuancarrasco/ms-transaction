/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.transaction.app.application.rest.api;

import com.transaction.app.application.rest.model.ErrorDto;
import com.transaction.app.application.rest.model.TransactionDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-02-10T14:48:54.328853500+01:00[Europe/Madrid]")
@Validated
@Api(value = "Transaction", description = "the Transaction API")
public interface TransactionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /transaction/{transactionId} : delete the transaction
     * Id to delete transaction
     *
     * @param transactionId Transaction id to delete order (required)
     * @return Transaction information deleted (status code 200)
     *         or Authentication is required to get the requested response (status code 401)
     *         or The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response (status code 403)
     *         or Invalid input (status code 422)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "delete the transaction", nickname = "deleteTransactionById", notes = "Id to delete transaction", tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction information deleted"),
        @ApiResponse(code = 401, message = "Authentication is required to get the requested response", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response", response = ErrorDto.class),
        @ApiResponse(code = 422, message = "Invalid input", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "unexpected error", response = ErrorDto.class) })
    @DeleteMapping(
        value = "/transaction/{transactionId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _deleteTransactionById(@ApiParam(value = "Transaction id to delete order",required=true) @PathVariable("transactionId") String transactionId) {
        return deleteTransactionById(transactionId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteTransactionById(String transactionId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transaction/ : Get transaction list
     * Get transaction list
     *
     * @return Transaction information found (status code 200)
     *         or Authentication is required to get the requested response (status code 401)
     *         or The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response (status code 403)
     *         or Invalid input (status code 422)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Get transaction list", nickname = "findAllTransaction", notes = "Get transaction list", response = TransactionDto.class, responseContainer = "List", tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction information found", response = TransactionDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication is required to get the requested response", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response", response = ErrorDto.class),
        @ApiResponse(code = 422, message = "Invalid input", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "unexpected error", response = ErrorDto.class) })
    @GetMapping(
        value = "/transaction/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TransactionDto>> _findAllTransaction() {
        return findAllTransaction();
    }

    // Override this method
    default  ResponseEntity<List<TransactionDto>> findAllTransaction() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactionType\" : \"COMPRA\", \"date\" : \"1988-01-30T00:00:00.000+0000\", \"price\" : 120.55, \"artworkId\" : \"artworkId\", \"transactionId\" : \"transactionId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transaction/{transactionId} : Get transaction by id
     *
     * @param transactionId Transaction id (required)
     * @return Transaction information found (status code 200)
     *         or Authentication is required to get the requested response (status code 401)
     *         or The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response (status code 403)
     *         or Invalid input (status code 422)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Get transaction by id", nickname = "getTransactionById", notes = "", response = TransactionDto.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction information found", response = TransactionDto.class),
        @ApiResponse(code = 401, message = "Authentication is required to get the requested response", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response", response = ErrorDto.class),
        @ApiResponse(code = 422, message = "Invalid input", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "unexpected error", response = ErrorDto.class) })
    @GetMapping(
        value = "/transaction/{transactionId}",
        produces = { "applciation/json", "application/json" }
    )
    default ResponseEntity<TransactionDto> _getTransactionById(@ApiParam(value = "Transaction id",required=true) @PathVariable("transactionId") String transactionId) {
        return getTransactionById(transactionId);
    }

    // Override this method
    default  ResponseEntity<TransactionDto> getTransactionById(String transactionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactionType\" : \"COMPRA\", \"date\" : \"1988-01-30T00:00:00.000+0000\", \"price\" : 120.55, \"artworkId\" : \"artworkId\", \"transactionId\" : \"transactionId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transaction/artwork/{artworkId} : Get transactions by artwork
     *
     * @param artworkId Artwork id (required)
     * @return Returns the transaction list by artwork (status code 200)
     *         or Authentication is required to get the requested response (status code 401)
     *         or The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response (status code 403)
     *         or Invalid input (status code 422)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Get transactions by artwork", nickname = "getTransactionkByArtwork", notes = "", response = TransactionDto.class, responseContainer = "List", tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the transaction list by artwork", response = TransactionDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication is required to get the requested response", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response", response = ErrorDto.class),
        @ApiResponse(code = 422, message = "Invalid input", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "unexpected error", response = ErrorDto.class) })
    @GetMapping(
        value = "/transaction/artwork/{artworkId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TransactionDto>> _getTransactionkByArtwork(@ApiParam(value = "Artwork id",required=true) @PathVariable("artworkId") String artworkId) {
        return getTransactionkByArtwork(artworkId);
    }

    // Override this method
    default  ResponseEntity<List<TransactionDto>> getTransactionkByArtwork(String artworkId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactionType\" : \"COMPRA\", \"date\" : \"1988-01-30T00:00:00.000+0000\", \"price\" : 120.55, \"artworkId\" : \"artworkId\", \"transactionId\" : \"transactionId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /transaction/ : save a new transaction
     * save a new transaction
     *
     * @param transactionDto Transaction info (optional)
     * @return transaction information found (status code 200)
     *         or Authentication is required to get the requested response (status code 401)
     *         or The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response (status code 403)
     *         or Invalid input (status code 422)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "save a new transaction", nickname = "saveTransaction", notes = "save a new transaction", response = TransactionDto.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "transaction information found", response = TransactionDto.class),
        @ApiResponse(code = 401, message = "Authentication is required to get the requested response", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response", response = ErrorDto.class),
        @ApiResponse(code = 422, message = "Invalid input", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "unexpected error", response = ErrorDto.class) })
    @PostMapping(
        value = "/transaction/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionDto> _saveTransaction(@ApiParam(value = "Transaction info"  )  @Valid @RequestBody(required = false) TransactionDto transactionDto) {
        return saveTransaction(transactionDto);
    }

    // Override this method
    default  ResponseEntity<TransactionDto> saveTransaction(TransactionDto transactionDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactionType\" : \"COMPRA\", \"date\" : \"1988-01-30T00:00:00.000+0000\", \"price\" : 120.55, \"artworkId\" : \"artworkId\", \"transactionId\" : \"transactionId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /transaction/{transactionId} : Update an existing transaction
     *
     * @param transactionId Id to delete transaction (required)
     * @param transactionDto Transaction data to update (required)
     * @return Transaction information found (status code 200)
     *         or Authentication is required to get the requested response (status code 401)
     *         or The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response (status code 403)
     *         or Invalid input (status code 422)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "Update an existing transaction", nickname = "updateTransaction", notes = "", response = TransactionDto.class, tags={ "Transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction information found", response = TransactionDto.class),
        @ApiResponse(code = 401, message = "Authentication is required to get the requested response", response = ErrorDto.class),
        @ApiResponse(code = 403, message = "The client does not have the necessary permissions for certain content, so the server is refusing to grant an appropriate response", response = ErrorDto.class),
        @ApiResponse(code = 422, message = "Invalid input", response = ErrorDto.class),
        @ApiResponse(code = 500, message = "unexpected error", response = ErrorDto.class) })
    @PutMapping(
        value = "/transaction/{transactionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionDto> _updateTransaction(@ApiParam(value = "Id to delete transaction",required=true) @PathVariable("transactionId") String transactionId,@ApiParam(value = "Transaction data to update" ,required=true )  @Valid @RequestBody TransactionDto transactionDto) {
        return updateTransaction(transactionId, transactionDto);
    }

    // Override this method
    default  ResponseEntity<TransactionDto> updateTransaction(String transactionId, TransactionDto transactionDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactionType\" : \"COMPRA\", \"date\" : \"1988-01-30T00:00:00.000+0000\", \"price\" : 120.55, \"artworkId\" : \"artworkId\", \"transactionId\" : \"transactionId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
